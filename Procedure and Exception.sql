-- EXCEPTION IN SP LEVEL


CREATE OR REPLACE PROCEDURE USP_EXCEPTIONLOG()
RETURNS VARCHAR(100)
LANGUAGE SQL
AS
DECLARE USEREXCEPTION EXCEPTION(-20001,'USERDEFILED EXCEPTION') ;

BEGIN

RAISE USEREXCEPTION ;


END;

CALL USP_EXCEPTIONLOG();

--CATCHING THE EXCEPTION IN SNOWFLAKE

CREATE OR REPLACE PROCEDURE USP_EXCEPTIONLOG_CATCHING()
RETURNS VARCHAR(100)
LANGUAGE SQL
AS
DECLARE USEREXCEPTION EXCEPTION(-20001,'USERDEFILED EXCEPTION') ;

BEGIN

RAISE USEREXCEPTION ;


EXCEPTION 
WHEN USEREXCEPTION THEN

RETURN 'USER DEFILED EXCEPTION' ;


END;


CALL USP_EXCEPTIONLOG_CATCHING ();



-------------IN BUILT EXCEPTION VARIABLES IN SNOWFLAKE
--SQLSTATE
--SQLCODE
--SQLERRM

CREATE OR REPLACE PROCEDURE USP_EXCEPTIONLOG1()
RETURNS VARCHAR(100)
LANGUAGE SQL
AS

DECLARE USERDEFILEDERR EXCEPTION(-20001,'USER DEFILED ERROR MESSAGE');

BEGIN

RAISE USERDEFILEDERR ;

EXCEPTION 
WHEN USERDEFILEDERR THEN  
RETURN 'USERDEFILED ERROR : ' || SQLSTATE || ' : ' || SQLCODE || ' : ' || SQLERRM ;


END;

CALL USP_EXCEPTIONLOG1();


----- IN BUILT EXCEPTION COMMANDS
--STATEMENT_ERROR
--EXPRESSION_ERROR


CREATE OR REPLACE PROCEDURE USP_EXCEPTION2()
RETURNS VARCHAR(100)
LANGUAGE SQL
AS

DECLARE ERRORVALUE INT;

BEGIN

--SELECT 1/0 ;  ---- STATEMENT_ERROR

DELETE FROM EMPLOYEEE11 ;  -- STATEMENT_ERROR



----EXCEPTION BLOCK

EXCEPTION 
WHEN EXPRESSION_ERROR THEN
RETURN  'EXPRESSION_ERROR :' || SQLSTATE ||  ':'   || SQLCODE ||  ':' || SQLERRM ;
WHEN STATEMENT_ERROR THEN
RETURN   'STATEMENT_ERROR :' || SQLSTATE ||  ':'   || SQLCODE ||  ':' || SQLERRM ; 
WHEN OTHER THEN
RETURN  'OTHER_ERROR : ' ||  SQLSTATE || ':' || SQLCODE || ': '|| SQLERRM ;


END;

CALL USP_EXCEPTION2() ;

